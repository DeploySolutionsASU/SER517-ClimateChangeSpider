package com.deploysolutions.searchApp;


import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Table;
import com.amazonaws.services.dynamodbv2.document.TableCollection;
import com.amazonaws.services.dynamodbv2.local.embedded.DynamoDBEmbedded;
import com.amazonaws.services.dynamodbv2.local.main.ServerRunner;
import com.amazonaws.services.dynamodbv2.local.server.DynamoDBProxyServer;
import com.amazonaws.services.dynamodbv2.model.AttributeDefinition;
import com.amazonaws.services.dynamodbv2.model.CreateTableRequest;
import com.amazonaws.services.dynamodbv2.model.KeySchemaElement;
import com.amazonaws.services.dynamodbv2.model.KeyType;
import com.amazonaws.services.dynamodbv2.model.ListTablesResult;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import com.amazonaws.services.dynamodbv2.model.TableDescription;

public class DocumentAPITableExample {



    static String tableName = "FileDownloads";

    public static void main(String[] args) throws Exception {
    	
    	 AmazonDynamoDB dynamodb = null;
         try {
             // Create an in-memory and in-process instance of DynamoDB Local that skips HTTP
             dynamodb = DynamoDBEmbedded.create().amazonDynamoDB();
             // use the DynamoDB API with DynamoDBEmbedded
             listTables(dynamodb.listTables(), "DynamoDB Embedded");
         } finally {
             // Shutdown the thread pools in DynamoDB Local / Embedded
             if(dynamodb != null) {
                 dynamodb.shutdown();
             }
         }
         
         // Create an in-memory and in-process instance of DynamoDB Local that runs over HTTP
         final String[] localArgs = { "-inMemory" };
         DynamoDBProxyServer server = null;
         try {
             server = ServerRunner.createServerFromCommandLineArgs(localArgs);
             server.start();

             dynamodb = AmazonDynamoDBClientBuilder.standard().withEndpointConfiguration(
                 // we can use any region here
                 new AwsClientBuilder.EndpointConfiguration("http://localhost:8000", "us-west-2"))
                 .build();

             // use the DynamoDB API over HTTP
             listTables(dynamodb.listTables(), "DynamoDB Local over HTTP");
         } finally {
             // Stop the DynamoDB Local endpoint
             if(server != null) {
                 server.stop();
             }
         }

        createExampleTable();

    }

    static void createExampleTable() {
    	 AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().withEndpointConfiguration(
				new AwsClientBuilder.EndpointConfiguration("http://localhost:8000", "us-west-2"))
				.build();     
	 DynamoDB dynamoDB = new DynamoDB(client);

        try {

            List<AttributeDefinition> attributeDefinitions = new ArrayList<AttributeDefinition>();
            attributeDefinitions.add(new AttributeDefinition().withAttributeName("JobID").withAttributeType("N"));

            List<KeySchemaElement> keySchema = new ArrayList<KeySchemaElement>();
            keySchema.add(new KeySchemaElement().withAttributeName("JobID").withKeyType(KeyType.HASH)); // Partition
                                                                                                     // key

            CreateTableRequest request = new CreateTableRequest().withTableName(tableName).withKeySchema(keySchema)
                .withAttributeDefinitions(attributeDefinitions).withProvisionedThroughput(
                    new ProvisionedThroughput().withReadCapacityUnits(5L).withWriteCapacityUnits(6L));

            System.out.println("Issuing CreateTable request for " + tableName);
            Table table = dynamoDB.createTable(request);

            System.out.println("Waiting for " + tableName + " to be created...this may take a while...");
            table.waitForActive();

        }
        catch (Exception e) {
            System.err.println("CreateTable request failed for " + tableName);
            System.err.println(e.getMessage());
        }

    }
    
    public static void listTables(ListTablesResult result, String method) {
        System.out.println("found " + Integer.toString(result.getTableNames().size()) + " tables with " + method);
        for(String table : result.getTableNames()) {
            System.out.println(table);
        }
    }
}